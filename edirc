#!/bin/bash
if [[ -s ${rc="$HOME/.edirc"} && -r $rc ]]; then
  source "$rc"
else
  read -r -p 'Nick: ' nick
  read -r -p 'Host: ' host
  read -r -p 'Port: ' port
  read -r -p 'Owner: ' owner
fi

if [[ $trace = yes ]]; then
  exec 4>> set-x
  BASH_XTRACEFD=4
  set -x
fi

shopt -s nullglob extglob nocasematch
set -m

cleanup () {
  rm -f paste:* fifo*
  declare -p spammers > spammers
  kill -TERM -$$
}
trap cleanup EXIT


if [[ -f ./spammers ]]; then
  . ./spammers
else
  declare -A spammers=()
fi


# split the lines and prepend PRIVMSG
splitline () { 
  while read -r -n "${linewidth-250}"; do
    printf 'PRIVMSG %s :%s\n' "$1" "$REPLY"
  done
}
antiflood () {
  # TODO: make it decent
  while read -r; do
    if (( SECONDS < 1 )); then (( row ++ ))
    else SECONDS=0 row=1
    fi
    printf '%s\n' "$REPLY"
    if (( row == 3 )); then
      sleep 2
    fi
  done
}


# management functions
ignore () {
  local nick
  case $1 in
    add) shift; for nick; do spammers["${nick,,}"]=x; done ;;
    del) shift; for nick; do unset "spammers["${nick,,}"]"; done ;;
    list) printf 'PRIVMSG %s :%s\n' "$owner" "${!spammers[*]}"
  esac
}
# write to the socket directly to bypass splitline/antiflood
join () { [[ $1 ]] && printf 'JOIN %s\n'          "$@"                   ; } >&"$irc"
part () { [[ $1 ]] && printf 'PART %s :%s\n'      "$1" "${2-"$partmsg"}" ; } >&"$irc"
say  () { [[ $2 ]] && printf 'PRIVMSG %s :%s\n'   "$1" "${*:2}"          ; } >&"$irc"
quit () {             printf 'QUIT :%s\n'         "${*-"$quitmsg"}"      ; } >&"$irc"
nick () { [[ $1 ]] && printf 'NICK %s\n'          "$1"                   ; } >&"$irc"
user () { [[ $3 ]] && printf 'USER %s %s * :%s\n' "$@"                   ; } >&"$irc"


exec {irc}<>"/dev/tcp/$host/$port" || { echo "Connection to $host failed" >&2 ; exit 1; }
exec 1>&"$irc"

nick "$nick"
user "${user:-"$nick"}" "${mode:-0}" "${realname:-"$nick"}"
[[ $nickserv = yes ]] && printf 'PRIVMSG NickServ :identify %s\n' "$password"
join "${channels[@]}"


# fast way to enter commands directly
mkfifo fifo && cat <> fifo &

# upload pastes
if [[ $upload = yes ]]; then
  inotifywait --format %f -m . -e create 2> /dev/null |
  while read -r; do
    if [[ $REPLY = paste:* ]]; then
      paste=$(curl -sF "aringa=<$REPLY" arin.ga)
      rm -f "$REPLY"
      REPLY=${REPLY#paste:ed:} REPLY=${REPLY//,/\/}
      if [[ $paste ]]; then paste+=/raw  # mira|krank wanted the raw link
      else paste='Upload failed'
      fi
      printf 'PRIVMSG %s :%s\n' "$REPLY" "$paste"
    fi
  done &
fi


removepid () {
  # someone just tried to crash ed
  # TODO: find a way to add that user to the spammers list for a minute
  local pid
  for pid in "${!edpids[@]}"; do
    # when ed dies the fifo is removed
    [[ ! -p "fifo:${edpids[pid]}" ]] && unset "edpids[pid]"
  done
}
trap removepid SIGCHLD


# parse what we get from the server
while read -r raw; do
  raw=${raw%$'\r'}
  [[ $log = yes ]] && printf "%($timeformat)T %s\n" -1 "$raw" >&"$log"

  # most clients don't show trailing whitespace anyway
  read -r sender type target msg <<< "$raw"
  msg=${msg#:}

  if [[ $sender = PING ]]; then
    printf 'PONG %s\n' "$type"
    continue
  fi

  if [[ $type = PRIVMSG ]]; then

    # "/" is valid in chan names and will be replaced by "," which is not
    sender=${sender//\//,} sender=${sender#:} sender=${sender%%!*}

    [[ ${spammers[${sender,,}]} ]] && continue

    # in channels, ignore everything that doesn't start with the trigger
    # privately, everything is fine  (still remove the leading trigger for the sake of consistency)
    # the trigger can be anything, even the empty string
    if [[ $msg = "${trigger-+}"* || $target = "$nick" ]]; then

      [[ $target = "$nick" ]] && target=$sender

      if [[ $msg = !* && $sender = "$owner" ]]; then
        # use responsibly
        if [[ $pedantic = yes ]]; then
          bash -nc "${msg#!}" && eval "${msg#!}"
        else
          eval "${msg#!}"
        fi |& splitline "$target"
        continue
      fi

      # if the fifo doesn't yet exist, assume that ed is not running and start it
      # create a file for every user or channel
      if [[ ! -p fifo:$target && ${#edpids[@]} -lt 50 ]]; then

        [[ -f "ed:$target" ]] || > "ed:$target"
        mkfifo "fifo:$target"

        {
          # huge
          ulimit -f 16384
          ulimit -v 32768

          ./red "ed:$target" <> "fifo:$target" |& splitline "$target"

          # ed run out of resources and crashed, clean up
          rm "fifo:$target"
        } &
        edpids+=( ["$!"]=$target )

      fi

      printf '%s\n' "${msg#"${trigger-+}"}" > "fifo:$target"
    fi
  fi
done <&"$irc" {log}>> "log$host" | antiflood
